View(nano)
nano$V5-nano$V4
# length haplotype blocks
hist(nano$V5-nano$V4)
summary(nano$V5-nano$V4)
# length haplotype blocks
hist(nano$V5-nano$V4,100)
hist(wgs$V5-wgs$V4,100)
hist(wgs$V5-wgs$V4,5 0)
hist(wgs$V5-wgs$V4,50)
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = F,stringsAsFactors = F)
View(bed)
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F)
View(bed)
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
View(bed)
summary(bed$end-bed$start)
# Nanopore phased VCF
nano <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_Hg19_Nanopore.sort.gtf',as.is = T,header = F,stringsAsFactors = F)
# length haplotype blocks
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
genes_blocks <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
View(genes_blocks)
genes_blocks <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(genes_blocks)
blocks <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
View(blocks)
blocks <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(blocks)
which(is.na(blocks$V4))
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
# filter BED gene model, keep only genes having a spanning haploblocks
genes_wo_blocks <- read.delim('outs/tmp_analysis/genes_without_blocks.bed',as.is = T,header = F,stringsAsFactors = F)
View(genes_wo_blocks)
head(genes_wo_blocks)
length(unique(genes_wo_blocks$V5))
bed$GeneID
length(unique(bed$GeneID))
length(unique(genes_wo_blocks$V5))/length(unique(bed$GeneID))
unique(genes_wo_blocks$V5)
bed$GeneID
bed <- bed[which(!bed$GeneID %in% unique(genes_wo_blocks$V5)),]
26965+7032
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
length(unique(bed$GeneID))
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
# filter BED gene model, keep only genes having a spanning haploblocks
genes_wo_blocks <- read.delim('outs/tmp_analysis/genes_without_blocks.bed',as.is = T,header = F,stringsAsFactors = F)
length(unique(genes_wo_blocks$V5))/length(unique(bed$GeneID)) # fraction of genes without haplotype blocks
bed <- bed[which(!bed$GeneID %in% unique(genes_wo_blocks$V5)),]
getwd()
write.table(bed,file = "outs/tmp_analysis/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.FILT.bed",col.names = T,sep = '\t',row.names = F,quote = F)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(genes_blocks)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10)
hist(genes_blocks$V10)
hist(genes_blocks$V10,100)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 1 ),]
hist(genes_blocks$V10,100)
summary(genes_blocks$V10,100)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 10 ),]
summary(genes_blocks$V10,100)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- which(duplicated(genes_blocks$V5))
which(duplicated(genes_blocks$V5))
# check genes spanned by multiple haploblocks
tocheck <- genes_blocks$V5[which(duplicated(genes_blocks$V5))]
length(tocheck)/legend(unique(genes_blocks$V5))
length(tocheck)/length(unique(genes_blocks$V5))
message(id)
id <- tocheck[1]
message(id)
this <- genes_blocks[which(genes_blocks$V5 == id),]
this
blocks_snps <- read.delim('outs/tmp_analysis/haploblocks_intersect_snps.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(genes_blocks$V10,100)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- genes_blocks$V5[which(duplicated(genes_blocks$V5))]
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
id <- tocheck[1]
id
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(gbs)
this <- genes_blocks[which(genes_blocks$V5 == id),]
this
id
gbs[which(gbs$V5 == id),]
count <- gbs[which(gbs$V5 == id),]
head(this)
paste(gbs[,6:8],sep = ':')
gbs
paste(count[,6:8],sep = ':')
paste(count[,6:8],collapse = ':')
paste(count$V6,count$V7,count$V8,collapse = ':')
paste(count$V6,count$V7,count$V8,sep = ':')
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
count$haploblock
count$V10
which.max(count$V10)
this$V1
this
count
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
this$haploblock
count$haploblock[which.max(count$V10)]
count$haploblock[which.max(count$V10)]
this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- c()
TabGenesBlocks <- c()
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
TabGenesBlocks <- rbind(TabGenesBlocks, this[which(this$haploblock == count$haploblock[which.max(count$V10)]),])
}
View(TabGenesBlocks)
tocheck
tocheck
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
TabGenesBlocks <- c()
blocks_snps <- read.delim('outs/tmp_analysis/haploblocks_intersect_snps.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- genes_blocks$V5[which(duplicated(genes_blocks$V5))]
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
TabGenesBlocks <- rbind(TabGenesBlocks, this[which(this$haploblock == count$haploblock[which.max(count$V10)]),])
}
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
# check genes spanned by multiple haploblocks
tocheck <- genes_blocks$V5[which(duplicated(genes_blocks$V5))]
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
id <- tocheck[1]
message(id)
count <- gbs[which(gbs$V5 == id),]
count
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
this
count
this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- rbind(TabGenesBlocks, block_to_add)
}
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks$V5[which(duplicated(TabGenesBlocks$V5))] # check for duplicates
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks$V5[23238]
TabGenesBlocks$V5[23238] %in% tocheck
id <- TabGenesBlocks$V5[23238]
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
count
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
count$haploblock
count
this <- genes_blocks[which(genes_blocks$V5 == id),]
this
this <- genes_blocks[which(genes_blocks$V5 == id),]
this
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
block_to_add
count$V10
which.max(count$V10)
count$haploblock[which.max(count$V10)]
this$haploblock
this <- genes_blocks[which(genes_blocks$V5 == id),]
this
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
this$haploblock
this$haploblock
count$haploblock[which.max(count$V10)]
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
block_to_add
TabGenesBlocks <- rbind(TabGenesBlocks, block_to_add)
TabGenesBlocks
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
id
tocheck
# check genes spanned by multiple haploblocks
tocheck <- unique(genes_blocks$V5[which(duplicated(genes_blocks$V5))])
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- rbind(TabGenesBlocks, block_to_add)
}
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks[order(TabGenesBlocks[,1],TabGenesBlocks[,2],TabGenesBlocks[,3]),]
TabGenesBlocks <- TabGenesBlocks[order(TabGenesBlocks[,1],TabGenesBlocks[,2],TabGenesBlocks[,3]),]
# Illumina WGS phased VCF
wgs <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_wgs.gtf',as.is = T,header = F,stringsAsFactors = F)
# Nanopore phased VCF
nano <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_Hg19_Nanopore.sort.gtf',as.is = T,header = F,stringsAsFactors = F)
# length haplotype blocks
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
if(F){
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
# filter BED gene model, keep only genes having a spanning haploblocks
genes_wo_blocks <- read.delim('outs/tmp_analysis/genes_without_blocks.bed',as.is = T,header = F,stringsAsFactors = F)
length(unique(genes_wo_blocks$V5))/length(unique(bed$GeneID)) # fraction of genes without haplotype blocks
bed <- bed[which(!bed$GeneID %in% unique(genes_wo_blocks$V5)),] # filtered genes
write.table(bed,file = "outs/tmp_analysis/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.FILT.bed",col.names = T,sep = '\t',row.names = F,quote = F)
}
# intersect data
#intersectBed -a humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.FILT.bed -b phased_Hg19_Nanopore.sort.noChr.bed -wao > genes_intersect_haploblocks.bed
#intersectBed -a phased_Hg19_Nanopore.sort.noChr.bed -b phased_Hg19_Nanopore.sort.noChr.vcf -wa -wb > haploblocks_intersect_snps.bed
# process intersect data
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- unique(genes_blocks$V5[which(duplicated(genes_blocks$V5))])
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- rbind(TabGenesBlocks, block_to_add)
}
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks <- TabGenesBlocks[order(TabGenesBlocks[,1],TabGenesBlocks[,2],TabGenesBlocks[,3]),]
View(TabGenesBlocks)
# Illumina WGS phased VCF
wgs <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_wgs.gtf',as.is = T,header = F,stringsAsFactors = F)
# Nanopore phased VCF
nano <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_Hg19_Nanopore.sort.gtf',as.is = T,header = F,stringsAsFactors = F)
# length haplotype blocks
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
if(F){
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
# filter BED gene model, keep only genes having a spanning haploblocks
genes_wo_blocks <- read.delim('outs/tmp_analysis/genes_without_blocks.bed',as.is = T,header = F,stringsAsFactors = F)
length(unique(genes_wo_blocks$V5))/length(unique(bed$GeneID)) # fraction of genes without haplotype blocks
bed <- bed[which(!bed$GeneID %in% unique(genes_wo_blocks$V5)),] # filtered genes
write.table(bed,file = "outs/tmp_analysis/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.FILT.bed",col.names = T,sep = '\t',row.names = F,quote = F)
}
# intersect data
#intersectBed -a humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.FILT.bed -b phased_Hg19_Nanopore.sort.noChr.bed -wao > genes_intersect_haploblocks.bed
#intersectBed -a phased_Hg19_Nanopore.sort.noChr.bed -b phased_Hg19_Nanopore.sort.noChr.vcf -wa -wb > haploblocks_intersect_snps.bed
# process intersect data
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- unique(genes_blocks$V5[which(duplicated(genes_blocks$V5))])
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- rbind(TabGenesBlocks, block_to_add)
}
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks <- TabGenesBlocks[order(TabGenesBlocks[,1],TabGenesBlocks[,2],TabGenesBlocks[,3]),]
# link haploblocks to snps
View(TabGenesBlocks)
getwd()
library(data.table)
phased_snps <- fread(input = "outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf",sep = "\t",stringsAsFactors = F,skip = "#")
phased_snps <- fread(input = "outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf",sep = "\t",stringsAsFactors = F,skip = "#",data.table = FALSE)
View(phased_snps)
phased_snps <- fread(input = "outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf",sep = "\t",stringsAsFactors = F,skip = "##",data.table = FALSE)
phased_snps <- read.delim(file = "outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf",sep = "\t",stringsAsFactors = F,comment.char = "#",header = F,as.is = T)
head(phased_snps)
head(TabGenesBlocks)
write.table(x = TabGenesBlocks,file = "outs/tmp_analysis/TabGenesBlocks.bed",quote = F,col.names = F,row.names = F,sep = "\t")
# process intersect data
#intersectBed -a humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.FILT.bed -b phased_Hg19_Nanopore.sort.noChr.bed -wao > genes_intersect_haploblocks.bed
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- unique(genes_blocks$V5[which(duplicated(genes_blocks$V5))])
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
genes_blocks$V5
# process intersect data
#intersectBed -a /icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed -b phased_Hg19_Nanopore.sort.noChr.bed -wa > genes_intersect_haploblocks.bed
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(genes_blocks)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
# process intersect data
#intersectBed -a /icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed -b phased_Hg19_Nanopore.sort.noChr.bed -wa > genes_intersect_haploblocks.bed
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(genes_blocks)
genes_blocks
colnames(genes_blocks)
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(blocks_int_genes)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
# process intersect data
# intersectBed -a phased_Hg19_Nanopore.sort.noChr.bed -b /icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed -wb > blocks_int_genes.bed
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
View(blocks_int_genes)
# count n. snps per haploblock
# intersectBed -a blocks_int_genes.bed -b phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf -c > blocks_int_genes_SNPs_count.bed
snps_count <- read.delim('outs/tmp_analysis/blocks_int_genes_SNPs_count.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(snps_count)
snps_count$V5
# check genes spanned by multiple haploblocks
tocheck <- unique(snps_count$V8[which(duplicated(snps_count$V8))])
length(tocheck)/length(unique(genes_blocks$V8)) # fraction of genes spanned by multiple haploblocks
length(tocheck)/length(unique(snps_count$V8)) # fraction of genes spanned by multiple haploblocks
tocheck
id=tocheck[1]
message(id)
message(id)
snps_count[which(snps_count$V8 == id),]
snps_count[which(snps_count$V8 == id),]
m <- snps_count[which(snps_count$V8 == id),]
which.max(m$V10)
m[which.max(m$V10),]
View(blocks_int_genes)
TabBlocksGenes <- blocks_int_genes[which(!blocks_int_genes$V8 %in% tocheck),]
TabBlocksGenes <- blocks_int_genes[which(!blocks_int_genes$V8 %in% tocheck),]
for(id in tocheck){
message(id)
m <- snps_count[which(snps_count$V8 == id),]
m <- m[which.max(m$V10),]
TabBlocksGenes <- rbind(TabBlocksGenes,m)
}
View(m)
View(TabBlocksGenes)
View(blocks_int_genes)
head(snps_count)
head(blocks_int_genes)
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
head(snps_count)
head(blocks_int_genes)
snps_count$group <- paste(snps_count$V1,snps_count$V2,snps_count$V3,sep = ':')
snps_count <- read.delim('outs/tmp_analysis/blocks_int_genes_SNPs_count.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
head(snps_count)
head(blocks_int_genes)
snps_count$group <- paste(snps_count$V1,snps_count$V2,snps_count$V3,sep = ':')
blocks_int_genes$group <- paste(blocks_int_genes$V1,blocks_int_genes$V2,blocks_int_genes$V3,sep = ':')
blocks_int_genes <- merge(x = blocks_int_genes,y = snps_count,by = "group",all.x = TRUE)
View(snps_count)
snps_count <- snps_count[,10:11]
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
# count n. snps per haploblock
# intersectBed -a blocks_int_genes.bed -b phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf -c > blocks_int_genes_SNPs_count.bed
snps_count <- read.delim('outs/tmp_analysis/blocks_int_genes_SNPs_count.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
head(snps_count)
head(blocks_int_genes)
snps_count$group <- paste(snps_count$V1,snps_count$V2,snps_count$V3,sep = ':')
blocks_int_genes$group <- paste(blocks_int_genes$V1,blocks_int_genes$V2,blocks_int_genes$V3,sep = ':')
snps_count <- snps_count[,10:11]
blocks_int_genes <- merge(x = blocks_int_genes,y = snps_count,by = "group",all.x = TRUE)
# process data
# intersectBed -a phased_Hg19_Nanopore.sort.noChr.bed -b /icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed -wb > blocks_int_genes.bed
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
# count n. snps per haploblock
# intersectBed -a blocks_int_genes.bed -b phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf -c > blocks_int_genes_SNPs_count.bed
snps_count <- read.delim('outs/tmp_analysis/blocks_int_genes_SNPs_count.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
# check genes spanned by multiple haploblocks
tocheck <- unique(blocks_int_genes$V8[which(duplicated(blocks_int_genes$V8))])
tocheck
length(tocheck)/length(unique(blocks_int_genes$V8)) # fraction of genes spanned by multiple haploblocks
TabBlocksGenes <- blocks_int_genes[which(!blocks_int_genes$V8 %in% tocheck),]
View(TabBlocksGenes)
m <- snps_count[which(snps_count$V8 == id),]
id=tocheck[1]
m <- snps_count[which(snps_count$V8 == id),]
m
m <- m[which.max(m$V10),]
m
group <- paste(m$V1,m$V2,m$V3,sep = ":")
group
paste(blocks_int_genes$V1,blocks_int_genes$V2,blocks_int_genes$V3,sep = ":")
group <- paste(m$V1,m$V2,m$V3,sep = ":")
all <- paste(blocks_int_genes$V1,blocks_int_genes$V2,blocks_int_genes$V3,sep = ":")
blocks_int_genes[which(all==group),]
# process data
# intersectBed -a phased_Hg19_Nanopore.sort.noChr.bed -b /icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed -wb > blocks_int_genes.bed
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
# count n. snps per haploblock
# intersectBed -a blocks_int_genes.bed -b phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf -c > blocks_int_genes_SNPs_count.bed
snps_count <- read.delim('outs/tmp_analysis/blocks_int_genes_SNPs_count.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
# check genes spanned by multiple haploblocks
tocheck <- unique(blocks_int_genes$V8[which(duplicated(blocks_int_genes$V8))])
length(tocheck)/length(unique(blocks_int_genes$V8)) # fraction of genes spanned by multiple haploblocks
TabBlocksGenes <- blocks_int_genes[which(!blocks_int_genes$V8 %in% tocheck),]
for(id in tocheck){
message(id)
m <- snps_count[which(snps_count$V8 == id),]
m <- m[which.max(m$V10),]
group <- paste(m$V1,m$V2,m$V3,sep = ":")
all <- paste(blocks_int_genes$V1,blocks_int_genes$V2,blocks_int_genes$V3,sep = ":")
TabBlocksGenes <- rbind(TabBlocksGenes,blocks_int_genes[which(all==group),])
}
which(duplicated(TabBlocksGenes$V8)) # sanity check for duplicates
TabBlocksGenes <- TabBlocksGenes[order(TabBlocksGenes[,1],TabBlocksGenes[,2],TabBlocksGenes[,3]),]
write.table(x = TabBlocksGenes,file = "outs/tmp_analysis/TabBlocksGenes.bed",quote = F,col.names = F,row.names = F,sep = "\t")
