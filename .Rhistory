#intersectBed -a phased_Hg19_Nanopore.sort.noChr.bed -b phased_Hg19_Nanopore.sort.noChr.vcf -wa -wb > haploblocks_intersect_snps.bed
# process intersect data
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- unique(genes_blocks$V5[which(duplicated(genes_blocks$V5))])
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- rbind(TabGenesBlocks, block_to_add)
}
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks <- TabGenesBlocks[order(TabGenesBlocks[,1],TabGenesBlocks[,2],TabGenesBlocks[,3]),]
# link haploblocks to snps
View(TabGenesBlocks)
getwd()
library(data.table)
phased_snps <- fread(input = "outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf",sep = "\t",stringsAsFactors = F,skip = "#")
phased_snps <- fread(input = "outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf",sep = "\t",stringsAsFactors = F,skip = "#",data.table = FALSE)
View(phased_snps)
phased_snps <- fread(input = "outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf",sep = "\t",stringsAsFactors = F,skip = "##",data.table = FALSE)
phased_snps <- read.delim(file = "outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf",sep = "\t",stringsAsFactors = F,comment.char = "#",header = F,as.is = T)
head(phased_snps)
head(TabGenesBlocks)
write.table(x = TabGenesBlocks,file = "outs/tmp_analysis/TabGenesBlocks.bed",quote = F,col.names = F,row.names = F,sep = "\t")
# process intersect data
#intersectBed -a humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.FILT.bed -b phased_Hg19_Nanopore.sort.noChr.bed -wao > genes_intersect_haploblocks.bed
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- unique(genes_blocks$V5[which(duplicated(genes_blocks$V5))])
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
genes_blocks$V5
# process intersect data
#intersectBed -a /icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed -b phased_Hg19_Nanopore.sort.noChr.bed -wa > genes_intersect_haploblocks.bed
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(genes_blocks)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
# process intersect data
#intersectBed -a /icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed -b phased_Hg19_Nanopore.sort.noChr.bed -wa > genes_intersect_haploblocks.bed
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(genes_blocks)
genes_blocks
colnames(genes_blocks)
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(blocks_int_genes)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
# process intersect data
# intersectBed -a phased_Hg19_Nanopore.sort.noChr.bed -b /icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed -wb > blocks_int_genes.bed
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
View(blocks_int_genes)
# count n. snps per haploblock
# intersectBed -a blocks_int_genes.bed -b phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf -c > blocks_int_genes_SNPs_count.bed
snps_count <- read.delim('outs/tmp_analysis/blocks_int_genes_SNPs_count.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(snps_count)
snps_count$V5
# check genes spanned by multiple haploblocks
tocheck <- unique(snps_count$V8[which(duplicated(snps_count$V8))])
length(tocheck)/length(unique(genes_blocks$V8)) # fraction of genes spanned by multiple haploblocks
length(tocheck)/length(unique(snps_count$V8)) # fraction of genes spanned by multiple haploblocks
tocheck
id=tocheck[1]
message(id)
message(id)
snps_count[which(snps_count$V8 == id),]
snps_count[which(snps_count$V8 == id),]
m <- snps_count[which(snps_count$V8 == id),]
which.max(m$V10)
m[which.max(m$V10),]
View(blocks_int_genes)
TabBlocksGenes <- blocks_int_genes[which(!blocks_int_genes$V8 %in% tocheck),]
TabBlocksGenes <- blocks_int_genes[which(!blocks_int_genes$V8 %in% tocheck),]
for(id in tocheck){
message(id)
m <- snps_count[which(snps_count$V8 == id),]
m <- m[which.max(m$V10),]
TabBlocksGenes <- rbind(TabBlocksGenes,m)
}
View(m)
View(TabBlocksGenes)
View(blocks_int_genes)
head(snps_count)
head(blocks_int_genes)
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
head(snps_count)
head(blocks_int_genes)
snps_count$group <- paste(snps_count$V1,snps_count$V2,snps_count$V3,sep = ':')
snps_count <- read.delim('outs/tmp_analysis/blocks_int_genes_SNPs_count.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
head(snps_count)
head(blocks_int_genes)
snps_count$group <- paste(snps_count$V1,snps_count$V2,snps_count$V3,sep = ':')
blocks_int_genes$group <- paste(blocks_int_genes$V1,blocks_int_genes$V2,blocks_int_genes$V3,sep = ':')
blocks_int_genes <- merge(x = blocks_int_genes,y = snps_count,by = "group",all.x = TRUE)
View(snps_count)
snps_count <- snps_count[,10:11]
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
# count n. snps per haploblock
# intersectBed -a blocks_int_genes.bed -b phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf -c > blocks_int_genes_SNPs_count.bed
snps_count <- read.delim('outs/tmp_analysis/blocks_int_genes_SNPs_count.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
head(snps_count)
head(blocks_int_genes)
snps_count$group <- paste(snps_count$V1,snps_count$V2,snps_count$V3,sep = ':')
blocks_int_genes$group <- paste(blocks_int_genes$V1,blocks_int_genes$V2,blocks_int_genes$V3,sep = ':')
snps_count <- snps_count[,10:11]
blocks_int_genes <- merge(x = blocks_int_genes,y = snps_count,by = "group",all.x = TRUE)
# process data
# intersectBed -a phased_Hg19_Nanopore.sort.noChr.bed -b /icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed -wb > blocks_int_genes.bed
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
# count n. snps per haploblock
# intersectBed -a blocks_int_genes.bed -b phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf -c > blocks_int_genes_SNPs_count.bed
snps_count <- read.delim('outs/tmp_analysis/blocks_int_genes_SNPs_count.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
# check genes spanned by multiple haploblocks
tocheck <- unique(blocks_int_genes$V8[which(duplicated(blocks_int_genes$V8))])
tocheck
length(tocheck)/length(unique(blocks_int_genes$V8)) # fraction of genes spanned by multiple haploblocks
TabBlocksGenes <- blocks_int_genes[which(!blocks_int_genes$V8 %in% tocheck),]
View(TabBlocksGenes)
m <- snps_count[which(snps_count$V8 == id),]
id=tocheck[1]
m <- snps_count[which(snps_count$V8 == id),]
m
m <- m[which.max(m$V10),]
m
group <- paste(m$V1,m$V2,m$V3,sep = ":")
group
paste(blocks_int_genes$V1,blocks_int_genes$V2,blocks_int_genes$V3,sep = ":")
group <- paste(m$V1,m$V2,m$V3,sep = ":")
all <- paste(blocks_int_genes$V1,blocks_int_genes$V2,blocks_int_genes$V3,sep = ":")
blocks_int_genes[which(all==group),]
# process data
# intersectBed -a phased_Hg19_Nanopore.sort.noChr.bed -b /icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed -wb > blocks_int_genes.bed
blocks_int_genes <- read.delim('outs/tmp_analysis/blocks_int_genes.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
# count n. snps per haploblock
# intersectBed -a blocks_int_genes.bed -b phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf -c > blocks_int_genes_SNPs_count.bed
snps_count <- read.delim('outs/tmp_analysis/blocks_int_genes_SNPs_count.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
# check genes spanned by multiple haploblocks
tocheck <- unique(blocks_int_genes$V8[which(duplicated(blocks_int_genes$V8))])
length(tocheck)/length(unique(blocks_int_genes$V8)) # fraction of genes spanned by multiple haploblocks
TabBlocksGenes <- blocks_int_genes[which(!blocks_int_genes$V8 %in% tocheck),]
for(id in tocheck){
message(id)
m <- snps_count[which(snps_count$V8 == id),]
m <- m[which.max(m$V10),]
group <- paste(m$V1,m$V2,m$V3,sep = ":")
all <- paste(blocks_int_genes$V1,blocks_int_genes$V2,blocks_int_genes$V3,sep = ":")
TabBlocksGenes <- rbind(TabBlocksGenes,blocks_int_genes[which(all==group),])
}
which(duplicated(TabBlocksGenes$V8)) # sanity check for duplicates
TabBlocksGenes <- TabBlocksGenes[order(TabBlocksGenes[,1],TabBlocksGenes[,2],TabBlocksGenes[,3]),]
write.table(x = TabBlocksGenes,file = "outs/tmp_analysis/TabBlocksGenes.bed",quote = F,col.names = F,row.names = F,sep = "\t")
getwd)=
getwd)=
getwd()
mat <- read.delim('outs/tmp_analysis/TabBlocksGenes_with_phasedSNPs.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
mat <- fread(input = 'outs/tmp_analysis/TabBlocksGenes_with_phasedSNPs.bed',sep = '\t',header = F,data.table = F)
library( data.table )
mat <- fread(input = 'outs/tmp_analysis/TabBlocksGenes_with_phasedSNPs.bed',sep = '\t',header = F,data.table = F)
head(mat)
length(unique(mat$V8))
table(mat$V8)
snps_per_gene <- table(mat$V8)
head(snps_per_gene)
summary(snps_per_gene)
length(unique(mat$V8)) # tot number of genes
snps_per_gene[1:2,]
head(snps_per_gene)
summary(snps_per_gene)
head(snps_per_gene)
snps_per_gene <- table(mat$V8[1:100])
snps_per_gene
snps_per_gene <- table(mat$V8[1:500])
snps_per_gene
snps_per_gene <- data.frame(table(mat$V8[1:500]))
snps_per_gene
snps_per_gene <- data.frame(table(mat$V8))
head(snps_per_gene)
colnames(snps_per_gene) <- c('gene','n.phasedSNPs')
head(snps_per_gene)
summary(snps_per_gene$)
summary(snps_per_gene$n.phasedSNPs)
hist(snps_per_gene$n.phasedSNPs)
hist(snps_per_gene$n.phasedSNPs,100)
hist(snps_per_gene$n.phasedSNPs,200)
hist(snps_per_gene$n.phasedSNPs,300)
boxplot(snps_per_gene$n.phasedSNPs)
boxplot(snps_per_gene$n.phasedSNPs,outline = F)
summary(snps_per_gene$n.phasedSNPs)
summary(snps_per_gene$n.phasedSNPs)
# Illumina WGS phased VCF
wgs <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_wgs.gtf',as.is = T,header = F,stringsAsFactors = F)
# Nanopore phased VCF
nano <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_Hg19_Nanopore.sort.gtf',as.is = T,header = F,stringsAsFactors = F)
# length haplotype blocks
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
getwd()
summary(snps_per_gene$n.phasedSNPs)
sc_cn_blocks <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed
head(single_cells_bed)
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed
sc <- single_cells_bed[1]
message(basename(sc))
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
basename(sc)
outbed <- gsub(basename(sc),pattern = '\\.bed$',replacement = '_intersect_haploblock.bed')
outbed
paste('intersectBed -a',haplotype_blocks,'-b',sc,'-wb >',outbed)
setwd('outs/copy_number_blocks/')
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',sc,'-wb >',outbed)
cmd
getwd()
cmd
outbed
blocks_int_genes <- read.delim(outbed,as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(blocks_int_genes)
haploblock_cn <- read.delim(outbed,as.is = T,header = F,stringsAsFactors = F,check.names = F)
head(haploblock_cn)
paste(haploblock_cn$V1,haploblock_cn$V2,haploblock_cn$V3,sep = ':')
which(duplicated(paste(haploblock_cn$V1,haploblock_cn$V2,haploblock_cn$V3,sep = ':')))
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',sc,'-wa -wb >',outbed)
cmd
haploblock_cn <- read.delim(outbed,as.is = T,header = F,stringsAsFactors = F,check.names = F)
which(duplicated(paste(haploblock_cn$V1,haploblock_cn$V2,haploblock_cn$V3,sep = ':')))
hb <- paste(haploblock_cn$V1,haploblock_cn$V2,haploblock_cn$V3,sep = ':')
which(duplicated(hb))
hb[which(duplicated(hb))]
cmd <- paste('intersectBed -a',sc,'-b',haplotype_blocks,'-wa -wb >',outbed)
cmd
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',sc,'-wa -wb >',outbed)
cmd
haploblock_cn <- read.delim(outbed,as.is = T,header = F,stringsAsFactors = F,check.names = F)
haploblock_cn
hb <- paste(haploblock_cn$V1,haploblock_cn$V2,haploblock_cn$V3,sep = ':')
hb[which(duplicated(hb))]
hb
hb <- paste(haploblock_cn$V1,haploblock_cn$V2,haploblock_cn$V3,sep = ':')
hb <- paste(haploblock_cn$V1,haploblock_cn$V2,haploblock_cn$V3,sep = ':')
hb
hb <- paste(haploblock_cn$V1,haploblock_cn$V2,haploblock_cn$V3,sep = ':')
which(duplicated(hb))
hb[which(duplicated(hb))]
tocheck <- unique(hb[which(duplicated(hb))])
haploblock_cn[which(hb==tocheck[1]),]
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
setwd('outs/copy_number_blocks/')
sc  <- single_cells_bed[1]
sc
message(basename(sc))
outbed <- gsub(basename(sc),pattern = '\\.bed$',replacement = '_intersect_haploblock.bed')
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',sc,'-wa -wb >',outbed)
cmd
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',sc,'-wa -wb >',outbed)
cmd <- paste('intersectBed -a',sc,'-b',haplotype_blocks,'-wa -wb >',outbed)
cmd
cmd <- paste('intersectBed -a',sc,'-b',haplotype_blocks,'-wa -wb >',outbed)
cmd
cmd <- paste('intersectBed -a',sc,'-b',haplotype_blocks,'-wb >',outbed)
for(sc in single_cells_bed){
message(basename(sc))
outbed <- gsub(basename(sc),pattern = '\\.bed$',replacement = '_intersect_haploblock.bed')
cmd <- paste('intersectBed -a',sc,'-b',haplotype_blocks,'-wb >',outbed)
system(cmd)
haploblock_cn <- read.delim(outbed,as.is = T,header = F,stringsAsFactors = F,check.names = F)
hb <- paste(haploblock_cn$V1,haploblock_cn$V2,haploblock_cn$V3,sep = ':')
tocheck <- unique(hb[which(duplicated(hb))])
haploblock_cn[which(hb==tocheck[1]),]
summary(blocks_int_genes$V3-blocks_int_genes$V2)
blocks_int_genes <- blocks_int_genes[which(blocks_int_genes$V3-blocks_int_genes$V2 > 0),]
blocks_int_genes <- blocks_int_genes[order(blocks_int_genes[,1],blocks_int_genes[,2],blocks_int_genes[,3]),]
}
message(basename(sc))
outbed <- gsub(basename(sc),pattern = '\\.bed$',replacement = '_intersect_haploblock.bed')
cmd <- paste('intersectBed -a',sc,'-b',haplotype_blocks,'-wb >',outbed)
sc
message(basename(sc))
outbed <- gsub(basename(sc),pattern = '\\.bed$',replacement = '_intersect_haploblock.bed')
cmd <- paste('intersectBed -a',sc,'-b',haplotype_blocks,'-wb >',outbed)
cmd
haploblock_cn <- read.delim(outbed,as.is = T,header = F,stringsAsFactors = F,check.names = F)
haploblock_cn
hb <- paste(haploblock_cn$V6,haploblock_cn$V7,haploblock_cn$V8,sep = ':')
tocheck <- unique(hb[which(duplicated(hb))])
tocheck
tocheck[1]
haploblock_cn$haplo_id <- paste(haploblock_cn$V6,haploblock_cn$V7,haploblock_cn$V8,sep = ':')
which(duplicated(haploblock_cn$haplo_id))
tocheck <- unique(haploblock_cn$haplo_id[which(duplicated(haploblock_cn$haplo_id))])
x <- tocheck[1]
x
haploblock_cn[which(haploblock_cn$haplo_id == x),]
haploblock_cn <- read.delim(outbed,as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(haploblock_cn$V3-haploblock_cn$V2)
haploblock_cn <- haploblock_cn[which(haploblock_cn$V3-haploblock_cn$V2 > 0),]
haploblock_cn
haploblock_cn <- read.delim(outbed,as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(haploblock_cn$V3-haploblock_cn$V2)
haploblock_cn <- haploblock_cn[which(haploblock_cn$V3-haploblock_cn$V2 > 0),]
haploblock_cn <- haploblock_cn[order(haploblock_cn[,1],haploblock_cn[,2],haploblock_cn[,3]),]
summary(haploblock_cn$V3-haploblock_cn$V2)
outbed
write.table(haploblock_cn,file = outbed,col.names = F,row.names = F,quote = F,sep = "\t")
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
sc
finalbed <- gsub(basename(sc),pattern = '\\.bed$',replacement = '_haploblocks_with_phasedSNPs.bed')
finalbed
cmd <- paste('intersectBed -a',outbed,'-b',phased_snps,'-wa -wb >',finalbed)
cmd
# cluster cells based on Hana's clustering
scdna_clusters <- read.csv("/icgc/dkfzlsdf/analysis/B260/users/v390v/cnv_inference/data/raw/first_sample/scDNA/evo_dist_9_clustering.csv")
View(scdna_clusters)
View(scdna_clusters)
# cluster cells based on Hana's clustering
scdna_clusters <- read.csv("/icgc/dkfzlsdf/analysis/B260/users/v390v/cnv_inference/data/raw/first_sample/scDNA/evo_dist_9_clustering.csv",row.names = FALSE)
View(scdna_clusters)
# cluster cells based on Hana's clustering
scdna_clusters <- read.csv("/icgc/dkfzlsdf/analysis/B260/users/v390v/cnv_inference/data/raw/first_sample/scDNA/evo_dist_9_clustering.csv",row.names = NULL)
View(scdna_clusters)
# cluster cells based on Hana's clustering
scdna_clusters <- read.csv("/icgc/dkfzlsdf/analysis/B260/users/v390v/cnv_inference/data/raw/first_sample/scDNA/evo_dist_9_clustering.csv")
View(scdna_clusters)
scdna_clusters <- scdna_clusters[,2:4]
barplot(table(scdna_clusters$LABEL))
barplot(table(scdna_clusters$LABEL),xlab = 'cluster',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
barplot(table(scdna_clusters$LABEL),xlab = 'scDNA based cluster',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
barplot(table(scdna_clusters$LABEL),xlab = 'clusters (based on scDNA)',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
head(single_cells_bed)
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
View(scdna_bed)
basename(scdna_bed$BED)
gsub(basename(scdna_bed$BED),pattern = 'cellid_|\\.bed$',replacement = '')
scdna_bed$CELL_ID <- gsub(basename(scdna_bed$BED),pattern = 'cellid_|\\.bed$',replacement = '')
scdna_clusters$CELL_ID
scdna_bed$CELL_ID <- as.numeric(gsub(basename(scdna_bed$BED),pattern = 'cellid_|\\.bed$',replacement = ''))
scdna_bed <- merge(scdna_bed,scdna_clusters,by = 'CELL_ID',all.x = TRUE)
View(scdna_bed)
scdna_bed <- scdna_bed[!which(is.na(scdna_bed$LABEL)),]
scdna_bed <- merge(scdna_bed,scdna_clusters,by = 'CELL_ID',all.x = TRUE)
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
scdna_bed$CELL_ID <- as.numeric(gsub(basename(scdna_bed$BED),pattern = 'cellid_|\\.bed$',replacement = ''))
scdna_bed <- merge(scdna_bed,scdna_clusters,by = 'CELL_ID',all.x = TRUE)
scdna_bed <- scdna_bed[which(!is.na(scdna_bed$LABEL)),]
View(scdna_bed)
unique(scdna_bed$LABEL)
getwd()
scdna_bed$BED
k=9
scdna_bed$BED[which(scdna_bed$LABEL == k)]
paste(scdna_bed$BED[which(scdna_bed$LABEL == k)])
paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = TRUE)
paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
getwd()
bedops_partition_cl
cmd <- paste('bedops --partition',multiple_beds,'>',paste0('bedops_partition_cluster_',k,'.bed'))
cmd
bedops_out <- paste0('bedops_partition_cluster_',k,'.bed')
bedops_out
intersectbed_out <- paste0('intersectbed_out_',k,'.bed')
cmd <- paste0('intersectBed -a',bedops_out,'-b',multiple_beds,'-wa -wb >',intersectbed_out)
cmd
cmd <- paste0('intersectBed -a',bedops_out,'-b',multiple_beds,'-wa -wb >',intersectbed_out)
cmd
cmd <- paste('intersectBed -a',bedops_out,'-b',multiple_beds,'-wa -wb > ',intersectbed_out)
cmd
cmd <- paste('intersectBed -a',bedops_out,'-b',multiple_beds,'-wa -wb >',intersectbed_out)
cmd
intersectbed_out_reduced <- gsub(intersectbed_out,pattern = "\\.bed",replacement = '_reduced.bed')
intersectbed_out_reduced
cmd <- paste('cut -f1,2,3,8',intersectbed_out,'>',intersectbed_out_reduced)
cmd
m <- read.delim(intersectbed_out_reduced,stringsAsFactors = F)
View(m)
m <- read.delim(intersectbed_out_reduced,stringsAsFactors = F,header = F)
View(m)
mergebed_out <- paste0('mergebed_out_',k,'.bed')
mergebed_out
cmd <- paste('mergeBed -i',intersectbed_out_9_reduced,'-c 4 -o median -d -1 >'.)
mergebed_out <- paste0('mergebed_out_',k,'.bed')
k=9
mergebed_out <- paste0('mergebed_out_',k,'.bed')
cmd <- paste('mergeBed -i',intersectbed_out_9_reduced,'-c 4 -o median -d -1 >',mergebed_out)
mergebed_out <- paste0('mergebed_out_',k,'.bed')
mergebed_out
intersectbed_out_reduced
mergebed_out
cmd <- paste('mergeBed -i',intersectbed_out_reduced,'-c 4 -o median -d -1 >',mergebed_out)
cmd
m <- read.delim(file = 'out.bed',stringsAsFactors = F,header = F)
View(m)
m2 <- read.delim(file = 'out.bed',stringsAsFactors = F,header = F)
View(m2)
m2 <- read.delim(file = 'outsort.bed',stringsAsFactors = F,header = F)
View(m2)
View(haploblock_cn)
View(m2)
mergebed_out <- paste0('mergebed_out_',k,'.bed')
cmd <- paste('mergeBed -i',intersectbed_out_reduced,'-c 4 -o median >',mergebed_out)
cmd
m <- read.delim(file = 'outsort.bed',stringsAsFactors = F,header = F)
View(m)
which(duplicated(m$V4))
m[629,]
m[629:630,]
m[which(m$V4 == m$V4[629]),]
# intersect merged bed with haplotype-block
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',mergebed_out,'-wb > out.bed')
cmd
# intersect merged bed with haplotype-block
final <- paste0('final_',k,'.bed')
final
final
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',mergebed_out,'-wb >',final)
cmd
cmd <- paste('cut -f 1,2,3,8',final,'>',final_reduced)
final_reduced <- paste0('final_reduced_',k,'.bed')
cmd <- paste('cut -f 1,2,3,8',final,'>',final_reduced)
cmd
# add phased SNPs to each block
tabfinal <- paste0('TabHaplotypeblock_with_phasedSNPs_',k,'.bed')
tabfinal
cmd <- paste0('intersectBed -a',final_reduced,'-b',phased_snps,'-wa -wb >',tabfinal)
cmd
source('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/code/assign_phased_SNPs_to_copy_number_blocks.R', echo=TRUE)
cmd <- paste('intersectBed -a',final_reduced,'-b',phased_snps,'-wa -wb >',tabfinal)
cmd
cmd <- paste('cut -f 1,2,3,8',final,'>',final_reduced)
cmd
# add phased SNPs to each block
tabfinal <- paste0('TabHaplotypeblock_with_phasedSNPs_',k,'.bed')
tabfinal
cmd <- paste('intersectBed -a',final_reduced,'-b',phased_snps,'-wa -wb >',tabfinal)
cmd
hblocks <- list.files('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks/',pattern = 'TabHaplotypeblock_with_phasedSNPs_')
hblocks
hblocks <- list.files('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks/',pattern = 'TabHaplotypeblock_with_phasedSNPs_',full.names = T)
hblocks
hb <- hblocks[1]
m <- read.delim(file = hb)
# Illumina WGS phased VCF
wgs <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_wgs.gtf',as.is = T,header = F,stringsAsFactors = F)
# Nanopore phased VCF
nano <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_Hg19_Nanopore.sort.gtf',as.is = T,header = F,stringsAsFactors = F)
# length haplotype blocks
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks/')
# intersect haplotype blocks and phased snps
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',phased_snps,'-wa -wb > haplotype_blocks_with_phasedSNPs.bed')
system(cmd)
cmd
getwd()
# intersect haplotype blocks and phased snps
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',phased_snps,'-wa -wb > haplotype_blocks_with_phasedSNPs.bed')
cmd
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',phased_snps,'-c > haplotype_blocks_with_phasedSNPs_count.bed')
cmd
x <- read.delim('haplotype_blocks_with_phasedSNPs_count.bed')
x <- read.delim('haplotype_blocks_with_phasedSNPs_count.bed',stringsAsFactors = F,header = F)
barplot(table(x$V5))
summary(table(x$V5))
summary(x$V5)
summary(x$V5)
summary(x$V3-x$V2)
summary(x$V3-x$V2)
x <- read.delim('haplotype_blocks_with_phasedSNPs_count.bed',stringsAsFactors = F,header = F)
summary(x$V5)
summary(x$V3-x$V2)
x <- read.delim('haplotype_blocks_with_phasedSNPs_count.bed',stringsAsFactors = F,header = F)
summary(x$V5)
summary(x$V3-x$V2)
