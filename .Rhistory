cmd
step3
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
k=list.files(pattern = 'studio6_')[]1
k=list.files(pattern = 'studio6_')[1]
message(k)
list.files(path = ".",pattern = 'studio6_')
list.files(path = "./",pattern = 'studio6_')
list.files(path = ".",pattern = 'step6_')
ks <- list.files(path = ".",pattern = 'step6_',full.names = TRUE)
ks
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/12_clusters_362cells/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
ks <- list.files(path = ".",pattern = 'step6_',full.names = TRUE)
ks
k <- ks[2]
k <- ks[1]
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
View(a)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,5,drop=F]
a
length(ks)
seq(2,length(ks)
)
k=2
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
head(b)
b <- b[,5,drop=F]
b
head(b)
a <- merge(a,b,by='group',all = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,5,drop=F]
head(a)
message(k)
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b
head(b)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
b <- b[,5,drop=F]
a <- merge(a,b,by='group',all = TRUE)
View(a)
d <- merge(a,b,by='group',all = TRUE)
a
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,4:5]
ks[1]
names(a)[5] <- basename(ks[1])
basename(ks[1])
colnames(a)[5] <- basename(ks[1])
colnames(a)[2] <- basename(ks[1])
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,c(5,4)]
colnames(a)[2] <- basename(ks[1])
k=2
message(k)
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
b <- b[,c(5,4)]
colnames(b)[2] <- basename(ks[1])
a <- merge(a,b,by='group',all = TRUE)
View(a)
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,c(5,4)]
colnames(a)[2] <- basename(ks[1])
k
message(k)
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
b <- b[,c(5,4)]
colnames(b)[2] <- basename(ks[k])
a <- merge(x = a,y = b,by='group',all = TRUE)
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,c(5,4)]
colnames(a)[2] <- basename(ks[1])
for(k in seq(2,length(ks))){
message(k)
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
b <- b[,c(5,4)]
colnames(b)[2] <- basename(ks[k])
a <- merge(x = a,y = b,by='group',all = TRUE)
}
View(a)
row.has.na <- apply(a, 1, function(x){any(is.na(x))})
row.has.na
sum(row.has.na)
sum(row.has.na)/nrow(a)
a[!row.has.na,]
hb_to_keep <- a[!row.has.na,]
# step 6 : filter haplotype blocks
m <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
m$group <- paste(m[,1],m[,2],m[,3],sep = ":")
unique(hb_to_keep$group)
m <- m[which(m$group %in% unique(hb_to_keep$group)),]
# step 6 : filter haplotype blocks
step6 <- paste0('step6_',k,'.bed')
m <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
m$group <- paste(m[,1],m[,2],m[,3],sep = ":")
m <- m[which(m$group %in% unique(hb_to_keep$group)),]
head(m)
seq_len(length(ks))
k=1
# step 6 : filter haplotype blocks
step6 <- paste0('step6_',k,'.bed')
m <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
m$group <- paste(m[,1],m[,2],m[,3],sep = ":")
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,c(5,4)]
colnames(a)[2] <- basename(ks[1])
for(k in seq(2,length(ks))){
message(k)
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
b <- b[,c(5,4)]
colnames(b)[2] <- basename(ks[k])
a <- merge(x = a,y = b,by='group',all = TRUE)
}
row.has.na <- apply(a, 1, function(x){any(is.na(x))})
sum(row.has.na)/nrow(a)
hb_to_keep <- a[!row.has.na,]
message(k)
k=1
# step 6 : filter haplotype blocks
step6 <- paste0('step6_',k,'.bed')
m <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
m$group <- paste(m[,1],m[,2],m[,3],sep = ":")
m <- m[which(m$group %in% unique(hb_to_keep$group)),]
write.table(m[,1:4],file = step6,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
# step 7 : add phased SNPs to each block
step7 <- paste0('step7_',k,'.bed')
cmd <- paste('intersectBed -a',step6,'-b',phased_snps,'-wa -wb >',step7)
cmd
# single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_20kb_as_CellRanger/cns_bed/",pattern = 'cellid_',full.names = T)
single_cells_bed
# single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_20kb_as_CellRanger/cns_bed/",pattern = '\\.bed$',full.names = T)
single_cells_bed
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/12_clusters_362cells/')
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_GTseq_data/9_clusters_eb_method/')
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/12_clusters_362cells/')
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_GTseq_data/9_clusters_eb_method/')
# single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_20kb_as_CellRanger/cns_bed/",pattern = '\\.nochr.bed$',full.names = T)
single_cells_bed
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/12_clusters_362cells/')
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_GTseq_data/9_clusters_eb_method/')
# G&T-seq scDNA
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/help_files/STP-PDX_G&T_bin_20kb_as_CellRanger/cluster9_eb_cell_ids.txt")
scdna_clusters
head(scdna_clusters)
# G&T-seq scDNA
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/help_files/STP-PDX_G&T_bin_20kb_as_CellRanger/cluster9_eb_cell_ids.txt")
ncol(scdna_clusters)
colnames(scdna_clusters) <- c("CELL_ID","LABEL")
barplot(table(scdna_clusters$LABEL),xlab = 'clusters (based on scDNA)',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
View(scdna_bed)
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
scdna_bed$CELL_ID <- as.numeric(gsub(basename(scdna_bed$BED),pattern = 'cellid_|\\.bed$',replacement = ''))
getwd()
# G&T-seq scDNA
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/help_files/STP-PDX_G&T_bin_20kb_as_CellRanger/cluster9_eb_cell_ids.txt")
scdna_clusters
colnames(scdna_clusters) <- c("CELL_ID","LABEL")
barplot(table(scdna_clusters$LABEL),xlab = 'clusters (based on scDNA)',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
basename(scdna_bed$BED)
scdna_bed$CELL_ID <- as.numeric(gsub(basename(scdna_bed$BED),pattern = 'lane1DNA|_sequence.cbs.nochr.bed$',replacement = ''))
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
scdna_bed$CELL_ID
scdna_bed$CELL_ID <- as.numeric(gsub(basename(scdna_bed$BED),pattern = 'lane1DNA|_sequence.cbs.nochr.bed',replacement = ''))
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
scdna_bed$BED
basename(scdna_bed$BED)
scdna_bed$CELL_ID <- as.numeric(gsub(basename(scdna_bed$BED),pattern = 'lane1DNA',replacement = ''))
scdna_bed$CELL_ID <- gsub(basename(scdna_bed$BED),pattern = 'lane1DNA|_sequence.cbs.nochr.bed',replacement = '')
scdna_bed$CELL_ID
scdna_bed <- merge(scdna_bed,scdna_clusters,by = 'CELL_ID',all.x = TRUE)
scdna_bed <- scdna_bed[which(!is.na(scdna_bed$LABEL)),]
scdna_bed
# G&T-seq scDNA
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/help_files/STP-PDX_G&T_bin_20kb_as_CellRanger/cluster9_eb_cell_ids.txt")
colnames(scdna_clusters) <- c("CELL_ID","LABEL")
barplot(table(scdna_clusters$LABEL),xlab = 'clusters (based on scDNA)',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
scdna_bed$CELL_ID <- gsub(basename(scdna_bed$BED),pattern = 'lane1DNA|_sequence.cbs.nochr.bed',replacement = '')
scdna_bed <- merge(scdna_bed,scdna_clusters,by = 'CELL_ID',all.x = TRUE)
View(scdna_bed)
scdna_bed <- scdna_bed[which(!is.na(scdna_bed$LABEL)),]
clusters <- unique(scdna_bed$LABEL)
clusters
clusters
k <- clusters[1]
message(k)
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_20kb_as_CellRanger/cns_bed/",pattern = '\\.nochr.bed$',full.names = T)
single_cells_bed
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_20kb_as_CellRanger/cns_bed/",pattern = '\\.nochr.bed$',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_GTseq_data/9_clusters_eb_method/')
# G&T-seq scDNA
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/help_files/STP-PDX_G&T_bin_20kb_as_CellRanger/cluster9_eb_cell_ids.txt")
colnames(scdna_clusters) <- c("CELL_ID","LABEL")
barplot(table(scdna_clusters$LABEL),xlab = 'clusters (based on scDNA)',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
scdna_bed
scdna_bed$CELL_ID <- gsub(basename(scdna_bed$BED),pattern = 'lane1DNA|_sequence.cbs.nochr.bed',replacement = '')
scdna_bed$CELL_ID
scdna_bed <- merge(scdna_bed,scdna_clusters,by = 'CELL_ID',all.x = TRUE)
scdna_bed
View(scdna_bed)
scdna_bed <- scdna_bed[which(!is.na(scdna_bed$LABEL)),]
clusters <- unique(scdna_bed$LABEL)
k=5
message(k)
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
multiple_beds
# step 1 : intersect all CN profiles from cells belonging to the same cluster
step1 <- paste0('step1_',k,'.bed')
cmd <- paste('bedops --partition',multiple_beds,'>',step1)
cmd
# step 2 : intersect step1 with all BEDs to assign CN to each genomic segment
step2 <- paste0('step2_',k,'.bed')
step2
cmd <- paste('intersectBed -a',step1,'-b',multiple_beds,'-wa -wb | cut -f1,2,3,8 >',step2)
cmd
# step 3 :
step3 <- paste0('step3_',k,'.bed')
cmd <- paste('mergeBed -i',step2,'-d -1 -c 4 -o count,mean,median,collapse >',step3)
cmd
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_20kb_as_CellRanger/cns_bed/",pattern = '\\.nochr.bed$',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_GTseq_data/9_clusters_eb_method/')
# G&T-seq scDNA
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/help_files/STP-PDX_G&T_bin_20kb_as_CellRanger/cluster9_eb_cell_ids.txt")
colnames(scdna_clusters) <- c("CELL_ID","LABEL")
barplot(table(scdna_clusters$LABEL),xlab = 'clusters (based on scDNA)',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
scdna_bed$CELL_ID <- gsub(basename(scdna_bed$BED),pattern = 'lane1DNA|_sequence.cbs.nochr.bed',replacement = '')
scdna_bed <- merge(scdna_bed,scdna_clusters,by = 'CELL_ID',all.x = TRUE)
scdna_bed <- scdna_bed[which(!is.na(scdna_bed$LABEL)),]
clusters <- unique(scdna_bed$LABEL)
k=5
message(k)
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
# step 1 : intersect all CN profiles from cells belonging to the same cluster
step1 <- paste0('step1_',k,'.bed')
cmd <- paste('bedops --partition',multiple_beds,'>',step1)
cmd
# step 2 : intersect step1 with all BEDs to assign CN to each genomic segment
step2 <- paste0('step2_',k,'.bed')
cmd <- paste('intersectBed -a',step1,'-b',multiple_beds,'-wa -wb | cut -f1,2,3,8 >',step2)
cmd
# cmd <- paste('intersectBed -a',step1,'-b',multiple_beds,'-wa -wb | cut -f1,2,3,8 >',step2)
cmd <- paste('intersectBed -a',step1,'-b',multiple_beds,'-wa -wb | cut -f1,2,3,9 >',step2)
cmd
# step 3 :
step3 <- paste0('step3_',k,'.bed')
cmd <- paste('mergeBed -i',step2,'-d -1 -c 4 -o count,mean,median,collapse >',step3)
cmd
m <- read.delim(file = step3,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
cn <- c()
for(idx in seq_len(nrow(m))){
cn <- c(cn, as.numeric(names(which.max(table(as.numeric(unlist(strsplit(m[idx,7],split = ','))))))))
}
m <- cbind(m,cn)
# update step3
write.table(m,file = step3,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
# step 4 : intersect haplotype blocks with step3
step4 <- paste0('step4_',k,'.bed')
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',step3,'-wa -wb >',step4)
cmd
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
hb <- unique(m$haploblock)
hb_to_exclude <- c()
tab <- c()
for(x in hb){
check <- length(unique(m[which(m$haploblock == x),12]))
if( check > 1 ){
hb_to_exclude <- c(hb_to_exclude, x)
} else {
tab <- rbind(tab, unique(m[which(m$haploblock == x),c(1:3,12)]))
}
}
length(hb_to_exclude)/length(hb) # fraction of hb with multiple spanning CNs
m <- m[which(!m$haploblock %in% hb_to_exclude),c()]
m
hb_to_exclude
m <- m[which(!m$haploblock %in% hb_to_exclude),]
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
hb <- unique(m$haploblock)
hb_to_exclude <- c()
tab <- c()
for(x in hb){
check <- length(unique(m[which(m$haploblock == x),12]))
if( check > 1 ){
hb_to_exclude <- c(hb_to_exclude, x)
} else {
tab <- rbind(tab, unique(m[which(m$haploblock == x),c(1:3,12)]))
}
}
length(hb_to_exclude)/length(hb) # fraction of hb with multiple spanning CNs
# step 5 : write haplo type blocks with associated copy number
step5 <- paste0('step5_',k,'.bed')
write.table(tab,file = step5,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
getwd()
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_20kb_as_CellRanger/cns_bed/",pattern = '\\.nochr.bed$',full.names = T)
single_cells_bed
# scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/STP/STP-Nuclei/processed_data/cluster9_cell_ids.txt")
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/STP/STP-Nuclei/processed_data/cluster12_cell_ids.txt")
scdna_clusters
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
for(k in clusters){
message(k)
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
# step 1 : intersect all CN profiles from cells belonging to the same cluster
step1 <- paste0('step1_',k,'.bed')
cmd <- paste('bedops --partition',multiple_beds,'>',step1)
system(cmd)
# step 2 : intersect step1 with all BEDs to assign CN to each genomic segment
step2 <- paste0('step2_',k,'.bed')
cmd <- paste('intersectBed -a',step1,'-b',multiple_beds,'-wa -wb | cut -f1,2,3,8 >',step2)
system(cmd)
# step 3 :
step3 <- paste0('step3_',k,'.bed')
cmd <- paste('mergeBed -i',step2,'-d -1 -c 4 -o count,mean,median,collapse >',step3)
system(cmd)
m <- read.delim(file = step3,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
cn <- c()
for(idx in seq_len(nrow(m))){
cn <- c(cn, as.numeric(names(which.max(table(as.numeric(unlist(strsplit(m[idx,7],split = ','))))))))
}
m <- cbind(m,cn)
# update step3
write.table(m,file = step3,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
# step 4 : intersect haplotype blocks with step3
step4 <- paste0('step4_',k,'.bed')
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',step3,'-wa -wb >',step4)
system(cmd)
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
hb <- unique(m$haploblock)
hb_to_exclude <- c()
tab <- c()
for(x in hb){
check <- length(unique(m[which(m$haploblock == x),12]))
if( check > 1 ){
hb_to_exclude <- c(hb_to_exclude, x)
} else {
tab <- rbind(tab, unique(m[which(m$haploblock == x),c(1:3,12)]))
}
}
length(hb_to_exclude)/length(hb) # fraction of hb with multiple spanning CNs
# step 5 : write haplo type blocks with associated copy number
step5 <- paste0('step5_',k,'.bed')
write.table(tab,file = step5,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
}
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
bed_file <-  single_cells_bed[1]
message(bed_file)
message(bed_file)
getwd()
outdir <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/single_cells_362cells"
single_cells_bed
message(basename(bed_file))
CELL_ID <- gsub(basename(bed_file),pattern = "\\.bed$",replacement = "")
CELL_ID
# step 1 : intersect scBED and CN blocks to assign CN to each genomic segment
step1 <- paste0('step1_',CELL_ID,'.bed')
step1
# step 4 : intersect haplotype blocks with step3
step4 <- paste0('step4_',CELL_ID,'.bed')
haplotype_blocks
step4 <- paste0('step4_',CELL_ID,'.bed')
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',bed_file,'-wa -wb >',step4)
getwd()
setwd(outdir)
cmd
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
View(m)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.3cols.bed"
message(basename(bed_file))
CELL_ID <- gsub(basename(bed_file),pattern = "\\.bed$",replacement = "")
# step 4 : intersect haplotype blocks with step3
step4 <- paste0('step4_',CELL_ID,'.bed')
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',bed_file,'-wa -wb >',step4)
cmd
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
hb <- unique(m$haploblock)
hb
hb_to_exclude <- c()
tab <- c()
for(x in hb){
check <- length(unique(m[which(m$haploblock == x),12]))
if( check > 1 ){
hb_to_exclude <- c(hb_to_exclude, x)
} else {
tab <- rbind(tab, unique(m[which(m$haploblock == x),c(1:3,12)]))
}
}
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
head(m)
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m <- m[,1:7]
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m <- m[,1:7]
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
hb <- unique(m$haploblock)
hb_to_exclude <- c()
tab <- c()
x <- hb[1]
check <- length(unique(m[which(m$haploblock == x),12]))
check
m[which(m$haploblock == x),]
check <- length(unique(m[which(m$haploblock == x),7]))
check
hb <- unique(m$haploblock)
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m <- m[,1:7]
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
hb <- unique(m$haploblock)
hb_to_exclude <- c()
tab <- c()
for(x in hb){
check <- length(unique(m[which(m$haploblock == x),7]))
if( check > 1 ){
hb_to_exclude <- c(hb_to_exclude, x)
} else {
tab <- rbind(tab, unique(m[which(m$haploblock == x),c(1:3,7)]))
}
}
length(hb_to_exclude)/length(hb) # fraction of hb with multiple spanning CNs
# step 5 : write haplo type blocks with associated copy number
step5 <- paste0('step5_',CELL_ID,'.bed')
write.table(tab,file = step5,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
# step 7 : add phased SNPs to each block
step7 <- paste0('step7_',CELL_ID,'.bed')
cmd <- paste('intersectBed -a',step5,'-b',phased_snps,'-wa -wb >',step7)
cmd
cmd <- paste('cut -f 1-6,8,9,14',step7,'>',step8)
# step 8 : reduce table columns and wrinte final output
step8 <- paste0('step8_',CELL_ID,'.bed')
cmd <- paste('cut -f 1-6,8,9,14',step7,'>',step8)
cmd
library(data.table)
m <- fread(file = step8,data.table = FALSE)
View(m)
header <- c("HB_CHROM","HB_START","HB_END","COPY_NUMBER","SNP_CHROM","SNP_POS","SNP_REF","SNP_ALT","SNP_PHASE_INFO")
colnames(m) <- header
m$SNP_PHASE_INFO
info <- m$SNP_PHASE_INFO
info <- m$SNP_PHASE_INFO[1]
strsplit(info,split = ":")
unlist(trsplit(info,split = ":"))[1]
unlist(strplit(info,split = ":"))[1]
unlist(strsplit(info,split = ":"))[1]
reduce_info <- function(info){
return(unlist(strsplit(info,split = ":"))[1])
}
sapply(X = m$SNP_PHASE_INFO[1:10],FUN = reduce_info)
apply(X = m$SNP_PHASE_INFO[1:10],FUN = reduce_info)
lapply(X = m$SNP_PHASE_INFO[1:10],FUN = reduce_info)
unlist(lapply(X = m$SNP_PHASE_INFO[1:10],FUN = reduce_info))
m$SNP_PHASE_INFO <- unlist(lapply(X = m$SNP_PHASE_INFO,FUN = reduce_info))
head(m)
m <- m[,c("SNP_CHROM","SNP_POS","SNP_REF","SNP_ALT","SNP_PHASE_INFO","HB_CHROM","HB_START","HB_END","COPY_NUMBER")]
write.table(m,file = step8,col.names = TRUE,row.names = FALSE,quote = FALSE,sep = "\t")
file.remove(step4,step5,step7)
