cmd
getwd()
# intersect haplotype blocks and phased snps
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',phased_snps,'-wa -wb > haplotype_blocks_with_phasedSNPs.bed')
cmd
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',phased_snps,'-c > haplotype_blocks_with_phasedSNPs_count.bed')
cmd
x <- read.delim('haplotype_blocks_with_phasedSNPs_count.bed')
x <- read.delim('haplotype_blocks_with_phasedSNPs_count.bed',stringsAsFactors = F,header = F)
barplot(table(x$V5))
summary(table(x$V5))
summary(x$V5)
summary(x$V5)
summary(x$V3-x$V2)
summary(x$V3-x$V2)
x <- read.delim('haplotype_blocks_with_phasedSNPs_count.bed',stringsAsFactors = F,header = F)
summary(x$V5)
summary(x$V3-x$V2)
x <- read.delim('haplotype_blocks_with_phasedSNPs_count.bed',stringsAsFactors = F,header = F)
summary(x$V5)
summary(x$V3-x$V2)
# single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_1Mb/cns_bed",pattern = 'cellid_',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_GTseq_data/')
# intersect haplotype blocks and phased snps
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',phased_snps,'-wa -wb > haplotype_blocks_with_phasedSNPs.bed')
cmd
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
# single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_1Mb/cns_bed",pattern = 'cellid_',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_GTseq_data/')
# intersect haplotype blocks and phased snps
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',phased_snps,'-wa -wb > haplotype_blocks_with_phasedSNPs.bed')
cmd
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',phased_snps,'-c > haplotype_blocks_with_phasedSNPs_count.bed')
system(cmd)
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',phased_snps,'-c > haplotype_blocks_with_phasedSNPs_count.bed')
cmd
x <- read.delim('haplotype_blocks_with_phasedSNPs_count.bed',stringsAsFactors = F,header = F)
summary(x$V5)
summary(x$V3-x$V2)
summary(x$V3-x$V2)
# cluster cells based on Hana's clustering
# scdna_clusters <- read.csv("/icgc/dkfzlsdf/analysis/B260/users/v390v/cnv_inference/data/raw/first_sample/scDNA/evo_dist_9_clustering.csv")
scdna_clusters <- read.csv("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/STP/STP-Nuclei/processed_data/cluster9_cell_ids.txt")
scdna_clusters
# cluster cells based on Hana's clustering
# scdna_clusters <- read.csv("/icgc/dkfzlsdf/analysis/B260/users/v390v/cnv_inference/data/raw/first_sample/scDNA/evo_dist_9_clustering.csv")
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/STP/STP-Nuclei/processed_data/cluster9_cell_ids.txt")
scdna_clusters
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/STP/STP-Nuclei/processed_data/cluster9_cell_ids.txt")
colnames(scdna_clusters) <- c("CELL_ID","LABEL")
barplot(table(scdna_clusters$LABEL),xlab = 'clusters (based on scDNA)',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/STP/STP-Nuclei/processed_data/cluster9_cell_ids.txt")
scdna_clusters <- scdna_clusters[,2:3]
colnames(scdna_clusters) <- c("CELL_ID","LABEL")
barplot(table(scdna_clusters$LABEL),xlab = 'clusters (based on scDNA)',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
single_cells_bed
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
scdna_bed$CELL_ID <- as.numeric(gsub(basename(scdna_bed$BED),pattern = 'cellid_|\\.bed$',replacement = ''))
scdna_bed <- merge(scdna_bed,scdna_clusters,by = 'CELL_ID',all.x = TRUE)
scdna_bed <- scdna_bed[which(!is.na(scdna_bed$LABEL)),]
clusters <- unique(scdna_bed$LABEL)
clusters
k=9
message(k)
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
multiple_beds
bedops_out <- paste0('bedops_partition_cluster_',k,'.bed')
cmd <- paste('bedops --partition',multiple_beds,'>',bedops_out)
cmd
intersectbed_out <- paste0('intersectbed_out_',k,'.bed')
getwd()
message(k)
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
multiple_beds
step1 <- paste0('step1_',k,'.bed')
multiple_beds
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',multiple_beds,'-wb >',intersectbed_out)
cmd
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',multiple_beds,'-wb >',step1)
cmd
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',multiple_beds,'-wa -wb >',step1)
cmd
haplotype_blocks
m <- read.delim(step1,header = FALSE,stringsAsFactors = FALSE)
View(m)
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
bedops_out <- paste0('bedops_partition_cluster_',k,'.bed')
bedops_out
intersectbed_out <- paste0('intersectbed_out_',k,'.bed')
cmd <- paste('intersectBed -a',bedops_out,'-b',multiple_beds,'-wa -wb >',intersectbed_out)
system(cmd)
intersectbed_out <- paste0('intersectbed_out_',k,'.bed')
cmd <- paste('intersectBed -a',bedops_out,'-b',multiple_beds,'-wa -wb >',intersectbed_out)
cmd
# step 1 : intersect all CN profiles from cells belonging to the same cluster
step1 <- paste0('bedops_partition_cluster_',k,'.bed')
cmd <- paste('bedops --partition',multiple_beds,'>',step1)
cmd
# step 2 : intersect step1 with all BEDs to assign CN to each genomic segment
step2 <- paste0('step2_',k,'.bed')
cmd <- paste('intersectBed -a',bedops_out,'-b',multiple_beds,'-wa -wb >',step2)
# step 1 : intersect all CN profiles from cells belonging to the same cluster
step1 <- paste0('step1_',k,'.bed')
cmd <- paste('bedops --partition',multiple_beds,'>',step1)
cmd
# step 2 : intersect step1 with all BEDs to assign CN to each genomic segment
step2 <- paste0('step2_',k,'.bed')
step2
cmd <- paste('intersectBed -a',step1,'-b',multiple_beds,'-wa -wb >',step2)
cmd
cmd <- paste('intersectBed -a',step1,'-b',multiple_beds,'-wa -wb | cut -f1,2,3,8 >',step2)
cmd
# step 3 :
step3 <- paste0('step3',k,'.bed')
step3
#cmd <- paste('mergeBed -i',intersectbed_out_reduced,'-c 4 -o median >',mergebed_out)
cmd <- paste('mergeBed -i',step2,'-c 4 -o collapse >',mergebed_out)
#cmd <- paste('mergeBed -i',intersectbed_out_reduced,'-c 4 -o median >',mergebed_out)
cmd <- paste('mergeBed -i',step2,'-c 4 -o collapse >',step3)
cmd <- paste('mergeBed -i',step2,'-c 4 -o collapse >',step3)
cmd
# step 3 :
step3 <- paste0('step3_',k,'.bed')
#cmd <- paste('mergeBed -i',intersectbed_out_reduced,'-c 4 -o median >',mergebed_out)
cmd <- paste('mergeBed -i',step2,'-c 4 -o collapse >',step3)
cmd
multiple_beds
# step 3 :
step3 <- paste0('step3_',k,'.bed')
#cmd <- paste('mergeBed -i',intersectbed_out_reduced,'-c 4 -o median >',mergebed_out)
cmd <- paste('mergeBed -i',step2,'-c 4 -o collapse >',step3)
cmd
cmd <- paste('mergeBed -i',step2,'-d -1 -c 4 -o count,mean,median,collapse >',step3)
cmd
# step 4 : intersect haplotype blocks with step3
step4 <- paste0('step4_',k,'.bed')
step4
m <- read.delim(file = step3,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
View(m)
seq_len(nrow(m))
m[i,7]
m[idx,7]
idx=1
m[idx,7]
strsplit(m[idx,7],split = ',')
table(as.numeric(unlist(strsplit(m[idx,7],split = ','))))
which.max(table(as.numeric(unlist(strsplit(m[idx,7],split = ',')))))
names(which.max(table(as.numeric(unlist(strsplit(m[idx,7],split = ','))))))
CN <- c()
cn <- c()
cn
as.numeric(names(which.max(table(as.numeric(unlist(strsplit(m[idx,7],split = ',')))))))
cn <- as.numeric(names(which.max(table(as.numeric(unlist(strsplit(m[idx,7],split = ',')))))))
cn
cn <- c()
cn <- c()
for(idx in seq_len(nrow(m))){
cn <- c(cn, as.numeric(names(which.max(table(as.numeric(unlist(strsplit(m[idx,7],split = ','))))))))
}
m <- cbind(m,cn)
write.table(m,file = step3,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
# step 4 : intersect haplotype blocks with step3
step4 <- paste0('step4_',k,'.bed')
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',step3,'-wa -wb >',step4)
cmd
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
View(m)
m$haploblock <- paste(m[,1],m[,2],m[,3],collapse = ":")
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
paste(m[,1],m[,2],m[,3],sep = ":")
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
View(m)
hb <- unique(m$haploblock)
hb
x=hb[1]
m[which(m$haploblock == x),]
m[which(m$haploblock == x),]
check <- length(unique(m[which(m$haploblock == x),12]))
check
j <- 0
j <- 0
for(x in hb){
check <- length(unique(m[which(m$haploblock == x),12]))
if( check > 1){
j <- j+1
}
}
j
j/length(hb)
unique(m$haploblock)
hb_to_exclude <- c()
x <- hb[1]
check <- length(unique(m[which(m$haploblock == x),12]))
check
x
hb_to_exclude <- c()
for(x in hb){
check <- length(unique(m[which(m$haploblock == x),12]))
if( check > 1 ){
hb_to_exclude <- c(hb_to_exclude, x)
}
}
length(hb_to_exclude)/length(hb)
length(hb_to_exclude)/length(hb) # fraction of hb with multiple spanning CNs
step5 <- c()
unique(m[which(m$haploblock == x),c(1:3,11,12)])
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
hb <- unique(m$haploblock)
hb_to_exclude <- c()
step5 <- c()
hb_to_exclude <- c()
step5 <- c()
for(x in hb){
check <- length(unique(m[which(m$haploblock == x),12]))
if( check > 1 ){
hb_to_exclude <- c(hb_to_exclude, x)
} else {
step5 <- rbind(step5, unique(m[which(m$haploblock == x),c(1:3,12)]))
}
}
View(step5)
phased_snps
cmd <- paste('intersectBed -a',step5,'-b',phased_snps,'-wa -wb >',step6)
# step 6 : add phased SNPs to each block
step6 <- paste0('step6_',k,'.bed')
cmd <- paste('intersectBed -a',step5,'-b',phased_snps,'-wa -wb >',step6)
cmd
tab <- c()
# step 5 : write haplo type blocks with associated copy number
step5 <- paste0('step5_',k,'.bed')
step5
# step 5 : write haplo type blocks with associated copy number
step5 <- paste0('step5_',k,'.bed')
write.table(tab,file = step5,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
hb <- unique(m$haploblock)
hb_to_exclude <- c()
tab <- c()
for(x in hb){
check <- length(unique(m[which(m$haploblock == x),12]))
if( check > 1 ){
hb_to_exclude <- c(hb_to_exclude, x)
} else {
tab <- rbind(tab, unique(m[which(m$haploblock == x),c(1:3,12)]))
}
}
length(hb_to_exclude)/length(hb) # fraction of hb with multiple spanning CNs
m <- m[which(!m$haploblock %in% hb_to_exclude),c()]
# step 5 : write haplo type blocks with associated copy number
step5 <- paste0('step5_',k,'.bed')
write.table(tab,file = step5,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
# step 6 : add phased SNPs to each block
step6 <- paste0('step6_',k,'.bed')
cmd <- paste('intersectBed -a',step5,'-b',phased_snps,'-wa -wb >',step6)
cmd
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
# intersect haplotype blocks and phased snps
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',phased_snps,'-wa -wb > haplotype_blocks_with_phasedSNPs.bed')
cmd
scdna_clusters <- read.delim("/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/data/10xCNV/STP/STP-Nuclei/processed_data/cluster9_cell_ids.txt")
scdna_clusters <- scdna_clusters[,2:3]
colnames(scdna_clusters) <- c("CELL_ID","LABEL")
barplot(table(scdna_clusters$LABEL),xlab = 'clusters (based on scDNA)',ylab = 'n. of cells') # n. cells per cluster. cluster 8 is the normal-cells cluster
scdna_bed <- data.frame(BED=single_cells_bed,CELL_ID=NA,stringsAsFactors = F)
scdna_bed$CELL_ID <- as.numeric(gsub(basename(scdna_bed$BED),pattern = 'cellid_|\\.bed$',replacement = ''))
scdna_bed <- merge(scdna_bed,scdna_clusters,by = 'CELL_ID',all.x = TRUE)
scdna_bed <- scdna_bed[which(!is.na(scdna_bed$LABEL)),]
clusters <- unique(scdna_bed$LABEL)
for(k in clusters){
message(k)
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
# step 1 : intersect all CN profiles from cells belonging to the same cluster
step1 <- paste0('step1_',k,'.bed')
cmd <- paste('bedops --partition',multiple_beds,'>',step1)
system(cmd)
# step 2 : intersect step1 with all BEDs to assign CN to each genomic segment
step2 <- paste0('step2_',k,'.bed')
cmd <- paste('intersectBed -a',step1,'-b',multiple_beds,'-wa -wb | cut -f1,2,3,8 >',step2)
system(cmd)
# step 3 :
step3 <- paste0('step3_',k,'.bed')
cmd <- paste('mergeBed -i',step2,'-d -1 -c 4 -o count,mean,median,collapse >',step3)
m <- read.delim(file = step3,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
cn <- c()
for(idx in seq_len(nrow(m))){
cn <- c(cn, as.numeric(names(which.max(table(as.numeric(unlist(strsplit(m[idx,7],split = ','))))))))
}
m <- cbind(m,cn)
# update step3
write.table(m,file = step3,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
# step 4 : intersect haplotype blocks with step3
step4 <- paste0('step4_',k,'.bed')
cmd <- paste('intersectBed -a',haplotype_blocks,'-b',step3,'-wa -wb >',step4)
system(cmd)
m <- read.delim(file = step4,header = FALSE,as.is = TRUE,stringsAsFactors = FALSE)
m$haploblock <- paste(m[,1],m[,2],m[,3],sep = ":")
hb <- unique(m$haploblock)
hb_to_exclude <- c()
tab <- c()
for(x in hb){
check <- length(unique(m[which(m$haploblock == x),12]))
if( check > 1 ){
hb_to_exclude <- c(hb_to_exclude, x)
} else {
tab <- rbind(tab, unique(m[which(m$haploblock == x),c(1:3,12)]))
}
}
length(hb_to_exclude)/length(hb) # fraction of hb with multiple spanning CNs
m <- m[which(!m$haploblock %in% hb_to_exclude),c()]
# step 5 : write haplo type blocks with associated copy number
step5 <- paste0('step5_',k,'.bed')
write.table(tab,file = step5,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
# step 6 : add phased SNPs to each block
step6 <- paste0('step6_',k,'.bed')
cmd <- paste('intersectBed -a',step5,'-b',phased_snps,'-wa -wb >',step6)
system(cmd)
}
k
clusters
message(k)
multiple_beds <- paste(scdna_bed$BED[which(scdna_bed$LABEL == k)],collapse = ' ')
multiple_beds
# step 1 : intersect all CN profiles from cells belonging to the same cluster
step1 <- paste0('step1_',k,'.bed')
cmd <- paste('bedops --partition',multiple_beds,'>',step1)
cmd
# step 1 : intersect all CN profiles from cells belonging to the same cluster
step1 <- paste0('step1_',k,'.bed')
cmd <- paste('bedops --partition',multiple_beds,'>',step1)
cmd
step3
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
k=list.files(pattern = 'studio6_')[]1
k=list.files(pattern = 'studio6_')[1]
message(k)
list.files(path = ".",pattern = 'studio6_')
list.files(path = "./",pattern = 'studio6_')
list.files(path = ".",pattern = 'step6_')
ks <- list.files(path = ".",pattern = 'step6_',full.names = TRUE)
ks
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/12_clusters_362cells/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
ks <- list.files(path = ".",pattern = 'step6_',full.names = TRUE)
ks
k <- ks[2]
k <- ks[1]
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
View(a)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,5,drop=F]
a
length(ks)
seq(2,length(ks)
)
k=2
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
head(b)
b <- b[,5,drop=F]
b
head(b)
a <- merge(a,b,by='group',all = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,5,drop=F]
head(a)
message(k)
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b
head(b)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
b <- b[,5,drop=F]
a <- merge(a,b,by='group',all = TRUE)
View(a)
d <- merge(a,b,by='group',all = TRUE)
a
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,4:5]
ks[1]
names(a)[5] <- basename(ks[1])
basename(ks[1])
colnames(a)[5] <- basename(ks[1])
colnames(a)[2] <- basename(ks[1])
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,c(5,4)]
colnames(a)[2] <- basename(ks[1])
k=2
message(k)
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
b <- b[,c(5,4)]
colnames(b)[2] <- basename(ks[1])
a <- merge(a,b,by='group',all = TRUE)
View(a)
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,c(5,4)]
colnames(a)[2] <- basename(ks[1])
k
message(k)
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
b <- b[,c(5,4)]
colnames(b)[2] <- basename(ks[k])
a <- merge(x = a,y = b,by='group',all = TRUE)
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,c(5,4)]
colnames(a)[2] <- basename(ks[1])
for(k in seq(2,length(ks))){
message(k)
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
b <- b[,c(5,4)]
colnames(b)[2] <- basename(ks[k])
a <- merge(x = a,y = b,by='group',all = TRUE)
}
View(a)
row.has.na <- apply(a, 1, function(x){any(is.na(x))})
row.has.na
sum(row.has.na)
sum(row.has.na)/nrow(a)
a[!row.has.na,]
hb_to_keep <- a[!row.has.na,]
# step 6 : filter haplotype blocks
m <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
m$group <- paste(m[,1],m[,2],m[,3],sep = ":")
unique(hb_to_keep$group)
m <- m[which(m$group %in% unique(hb_to_keep$group)),]
# step 6 : filter haplotype blocks
step6 <- paste0('step6_',k,'.bed')
m <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
m$group <- paste(m[,1],m[,2],m[,3],sep = ":")
m <- m[which(m$group %in% unique(hb_to_keep$group)),]
head(m)
seq_len(length(ks))
k=1
# step 6 : filter haplotype blocks
step6 <- paste0('step6_',k,'.bed')
m <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
m$group <- paste(m[,1],m[,2],m[,3],sep = ":")
ks <- list.files(path = ".",pattern = 'step5_',full.names = TRUE)
a <- read.delim(file = ks[1],stringsAsFactors = FALSE,header = F)
a$group <- paste(a[,1],a[,2],a[,3],sep = ":")
a <- a[,c(5,4)]
colnames(a)[2] <- basename(ks[1])
for(k in seq(2,length(ks))){
message(k)
b <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
b$group <- paste(b[,1],b[,2],b[,3],sep = ":")
b <- b[,c(5,4)]
colnames(b)[2] <- basename(ks[k])
a <- merge(x = a,y = b,by='group',all = TRUE)
}
row.has.na <- apply(a, 1, function(x){any(is.na(x))})
sum(row.has.na)/nrow(a)
hb_to_keep <- a[!row.has.na,]
message(k)
k=1
# step 6 : filter haplotype blocks
step6 <- paste0('step6_',k,'.bed')
m <- read.delim(file = ks[k],stringsAsFactors = FALSE,header = F)
m$group <- paste(m[,1],m[,2],m[,3],sep = ":")
m <- m[which(m$group %in% unique(hb_to_keep$group)),]
write.table(m[,1:4],file = step6,col.names = FALSE,row.names = FALSE,quote = FALSE,sep = "\t")
# step 7 : add phased SNPs to each block
step7 <- paste0('step7_',k,'.bed')
cmd <- paste('intersectBed -a',step6,'-b',phased_snps,'-wa -wb >',step7)
cmd
# single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_20kb_as_CellRanger/cns_bed/",pattern = 'cellid_',full.names = T)
single_cells_bed
# single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_10x/dna/sample1.genemodel.transcript/tmp.parallel",pattern = 'cellid_',full.names = T)
single_cells_bed <- list.files(path = "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/single_cell_cn_GTseq/dna/cnvkit/wgs_normal_as_ctrl_bin_20kb_as_CellRanger/cns_bed/",pattern = '\\.bed$',full.names = T)
single_cells_bed
haplotype_blocks <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed"
phased_snps <- "/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.OnlyPhased.vcf"
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/12_clusters_362cells/')
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_GTseq_data/9_clusters_eb_method/')
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/12_clusters_362cells/')
# setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_10xCNV_data/9_clusters_362cells/')
setwd('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/copy_number_blocks_GTseq_data/9_clusters_eb_method/')
