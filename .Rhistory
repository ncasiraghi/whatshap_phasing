wgs <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_wgs.gtf',as.is = T)
nano <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_Hg38_Nanopore.gtf',as.is = T)
head(nano)
# Illumina WGS phased VCF
wgs <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_wgs.gtf',as.is = T,header = F,stringsAsFactors = F)
# Nanopore phased VCF
nano <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_Hg38_Nanopore.gtf',as.is = T,header = F,stringsAsFactors = F)
View(nano)
nano$V5-nano$V4
# length haplotype blocks
hist(nano$V5-nano$V4)
summary(nano$V5-nano$V4)
# length haplotype blocks
hist(nano$V5-nano$V4,100)
hist(wgs$V5-wgs$V4,100)
hist(wgs$V5-wgs$V4,5 0)
hist(wgs$V5-wgs$V4,50)
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = F,stringsAsFactors = F)
View(bed)
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F)
View(bed)
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
View(bed)
summary(bed$end-bed$start)
# Nanopore phased VCF
nano <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_Hg19_Nanopore.sort.gtf',as.is = T,header = F,stringsAsFactors = F)
# length haplotype blocks
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
genes_blocks <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
View(genes_blocks)
genes_blocks <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(genes_blocks)
blocks <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
View(blocks)
blocks <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/tmp_analysis/phased_Hg19_Nanopore.sort.noChr.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(blocks)
which(is.na(blocks$V4))
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
# filter BED gene model, keep only genes having a spanning haploblocks
genes_wo_blocks <- read.delim('outs/tmp_analysis/genes_without_blocks.bed',as.is = T,header = F,stringsAsFactors = F)
View(genes_wo_blocks)
head(genes_wo_blocks)
length(unique(genes_wo_blocks$V5))
bed$GeneID
length(unique(bed$GeneID))
length(unique(genes_wo_blocks$V5))/length(unique(bed$GeneID))
unique(genes_wo_blocks$V5)
bed$GeneID
bed <- bed[which(!bed$GeneID %in% unique(genes_wo_blocks$V5)),]
26965+7032
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
length(unique(bed$GeneID))
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
# filter BED gene model, keep only genes having a spanning haploblocks
genes_wo_blocks <- read.delim('outs/tmp_analysis/genes_without_blocks.bed',as.is = T,header = F,stringsAsFactors = F)
length(unique(genes_wo_blocks$V5))/length(unique(bed$GeneID)) # fraction of genes without haplotype blocks
bed <- bed[which(!bed$GeneID %in% unique(genes_wo_blocks$V5)),]
getwd()
write.table(bed,file = "outs/tmp_analysis/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.FILT.bed",col.names = T,sep = '\t',row.names = F,quote = F)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(genes_blocks)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10)
hist(genes_blocks$V10)
hist(genes_blocks$V10,100)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 1 ),]
hist(genes_blocks$V10,100)
summary(genes_blocks$V10,100)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 10 ),]
summary(genes_blocks$V10,100)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- which(duplicated(genes_blocks$V5))
which(duplicated(genes_blocks$V5))
# check genes spanned by multiple haploblocks
tocheck <- genes_blocks$V5[which(duplicated(genes_blocks$V5))]
length(tocheck)/legend(unique(genes_blocks$V5))
length(tocheck)/length(unique(genes_blocks$V5))
message(id)
id <- tocheck[1]
message(id)
this <- genes_blocks[which(genes_blocks$V5 == id),]
this
blocks_snps <- read.delim('outs/tmp_analysis/haploblocks_intersect_snps.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
summary(genes_blocks$V10,100)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- genes_blocks$V5[which(duplicated(genes_blocks$V5))]
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
id <- tocheck[1]
id
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
View(gbs)
this <- genes_blocks[which(genes_blocks$V5 == id),]
this
id
gbs[which(gbs$V5 == id),]
count <- gbs[which(gbs$V5 == id),]
head(this)
paste(gbs[,6:8],sep = ':')
gbs
paste(count[,6:8],sep = ':')
paste(count[,6:8],collapse = ':')
paste(count$V6,count$V7,count$V8,collapse = ':')
paste(count$V6,count$V7,count$V8,sep = ':')
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
count$haploblock
count$V10
which.max(count$V10)
this$V1
this
count
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
this$haploblock
count$haploblock[which.max(count$V10)]
count$haploblock[which.max(count$V10)]
this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- c()
TabGenesBlocks <- c()
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
TabGenesBlocks <- rbind(TabGenesBlocks, this[which(this$haploblock == count$haploblock[which.max(count$V10)]),])
}
View(TabGenesBlocks)
tocheck
tocheck
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
TabGenesBlocks <- c()
blocks_snps <- read.delim('outs/tmp_analysis/haploblocks_intersect_snps.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- genes_blocks$V5[which(duplicated(genes_blocks$V5))]
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
TabGenesBlocks <- rbind(TabGenesBlocks, this[which(this$haploblock == count$haploblock[which.max(count$V10)]),])
}
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
# check genes spanned by multiple haploblocks
tocheck <- genes_blocks$V5[which(duplicated(genes_blocks$V5))]
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
id <- tocheck[1]
message(id)
count <- gbs[which(gbs$V5 == id),]
count
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
this
count
this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- rbind(TabGenesBlocks, block_to_add)
}
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks$V5[which(duplicated(TabGenesBlocks$V5))] # check for duplicates
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks$V5[23238]
TabGenesBlocks$V5[23238] %in% tocheck
id <- TabGenesBlocks$V5[23238]
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
count
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
count$haploblock
count
this <- genes_blocks[which(genes_blocks$V5 == id),]
this
this <- genes_blocks[which(genes_blocks$V5 == id),]
this
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
block_to_add
count$V10
which.max(count$V10)
count$haploblock[which.max(count$V10)]
this$haploblock
this <- genes_blocks[which(genes_blocks$V5 == id),]
this
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
this$haploblock
this$haploblock
count$haploblock[which.max(count$V10)]
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
block_to_add
TabGenesBlocks <- rbind(TabGenesBlocks, block_to_add)
TabGenesBlocks
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
id
tocheck
# check genes spanned by multiple haploblocks
tocheck <- unique(genes_blocks$V5[which(duplicated(genes_blocks$V5))])
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- rbind(TabGenesBlocks, block_to_add)
}
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks[order(TabGenesBlocks[,1],TabGenesBlocks[,2],TabGenesBlocks[,3]),]
TabGenesBlocks <- TabGenesBlocks[order(TabGenesBlocks[,1],TabGenesBlocks[,2],TabGenesBlocks[,3]),]
# Illumina WGS phased VCF
wgs <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_wgs.gtf',as.is = T,header = F,stringsAsFactors = F)
# Nanopore phased VCF
nano <- read.delim('/icgc/dkfzlsdf/analysis/B260/projects/chromothripsis_medulloblastoma/whatshap_phasing/outs/phased_Hg19_Nanopore.sort.gtf',as.is = T,header = F,stringsAsFactors = F)
# length haplotype blocks
summary(nano$V5-nano$V4)
summary(wgs$V5-wgs$V4)
if(F){
# BED gene model
bed <- read.delim('/icgc/dkfzlsdf/analysis/B260/users/n790i/tools/binning_the_genome/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.bed',as.is = T,header = T,stringsAsFactors = F,check.names = F)
summary(bed$end-bed$start)
# filter BED gene model, keep only genes having a spanning haploblocks
genes_wo_blocks <- read.delim('outs/tmp_analysis/genes_without_blocks.bed',as.is = T,header = F,stringsAsFactors = F)
length(unique(genes_wo_blocks$V5))/length(unique(bed$GeneID)) # fraction of genes without haplotype blocks
bed <- bed[which(!bed$GeneID %in% unique(genes_wo_blocks$V5)),] # filtered genes
write.table(bed,file = "outs/tmp_analysis/humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.FILT.bed",col.names = T,sep = '\t',row.names = F,quote = F)
}
# intersect data
#intersectBed -a humangenes_biomart_GRCh37p13_TranscriptStartEnd.sort.merged.unique.FILT.bed -b phased_Hg19_Nanopore.sort.noChr.bed -wao > genes_intersect_haploblocks.bed
#intersectBed -a phased_Hg19_Nanopore.sort.noChr.bed -b phased_Hg19_Nanopore.sort.noChr.vcf -wa -wb > haploblocks_intersect_snps.bed
# process intersect data
genes_blocks <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
genes_blocks <- genes_blocks[which( genes_blocks$V10 > 0 ),]
summary(genes_blocks$V10,100)
# check genes spanned by multiple haploblocks
tocheck <- unique(genes_blocks$V5[which(duplicated(genes_blocks$V5))])
length(tocheck)/length(unique(genes_blocks$V5)) # fraction of genes spanned by multiple haploblocks
TabGenesBlocks <- genes_blocks[which(!genes_blocks$V5 %in% tocheck),]
TabGenesBlocks$haploblock <- paste(TabGenesBlocks$V6,TabGenesBlocks$V7,TabGenesBlocks$V8,sep = ':')
# phased SNPs per intersected gene and haplotypeblock
gbs <- read.delim('outs/tmp_analysis/genes_intersect_haploblocks.bed',as.is = T,header = F,stringsAsFactors = F,check.names = F)
for(id in tocheck){
message(id)
count <- gbs[which(gbs$V5 == id),]
count$haploblock <- paste(count$V6,count$V7,count$V8,sep = ':')
this <- genes_blocks[which(genes_blocks$V5 == id),]
this$haploblock <- paste(this$V6,this$V7,this$V8,sep = ':')
block_to_add <- this[which(this$haploblock == count$haploblock[which.max(count$V10)]),]
TabGenesBlocks <- rbind(TabGenesBlocks, block_to_add)
}
which(duplicated(TabGenesBlocks$V5)) # check for duplicates
TabGenesBlocks <- TabGenesBlocks[order(TabGenesBlocks[,1],TabGenesBlocks[,2],TabGenesBlocks[,3]),]
View(TabGenesBlocks)
